clear all
close all

addpath '../'
addpath '../inference/'
addpath '../inference/utils/'


% cases considered and checked
% phi = 0 : counts all 0, as expected



%
% seed=10;
% randn('seed', seed);
% rand('seed', seed);




alpha = 4; sigma = 0; tau = 1; % Parameters gamma process
phi = 10;                       % tunes dependence in dependent gamma process
settings.rho = 0.1;                      % death rate for latent interactions
T = 4;                         % Number of time steps
settings.dt=1;
settings.fromggprnd=1;
settings.onlychain=0;
settings.threshold=1e-6;

settings.leapfrog.epsilon = 0.1;
settings.leapfrog.L = 10;
settings.leapfrog.nadapt=0;
N_burn = 0;
thin = 1;

[Z, w, c, KT,  N_new, N_old, N, M, indchain]= dyngraphrnd(alpha, sigma, tau, T, phi, settings);

Na = size(w,2);
%tweights=w(:, 1:K(T));test_C

indlog = false(1, length(indchain)) ;
indlog(indchain) = true;

wrem =  sum(w(:, ~indlog),2); % need to compute wrem so that we can use it as it is for the inference on weights
tw =w(:, indlog); % keep only the nodes that are active at least one time over T.

%Increase the number of nodes by one to account for the unobserved ones.
tw = [tw'; wrem' ];
crem =  sum(c(:, ~indlog),2);

tc=[c(:, indlog)';  crem'];


m = M(indchain, :);

% Init C
iters=1000;

%weights = rand(size(tw));
weights= tw;

% random C initialization
counts = poissrnd(phi.*weights)+1;
initc=counts;
%C(isnan(weights))=0;
c_samples =  cell(1, iters);


rate=zeros(T, iters);
epsilon = settings.leapfrog.epsilon/(Na-1)^(1/4).*ones(T,1); % Leapfrog stepsize





for t=1:iters
    if mod(t, 200)==0
        t
    end
     counts = sample_C(counts, weights, phi, alpha, tau);
    %[weights, rate(:, t)] = sample_weights(weights, counts, m, epsilon, alpha, tau, phi, settings);
    %     wts
    if t<settings.leapfrog.nadapt % Adapt the stepsize
        epsilon = exp(log(epsilon) + .01*(mean(rate(:,1:t), 2) - 0.6));
    end
    
    %  [weights] = sample_Wst(weights, counts, alpha, phi, tau);
      
    if (t>N_burn && rem((t-N_burn),thin)==0)
        
        for k=1:T
            weights_st{k}(t, :) = weights(:, k);
            
            counts_st{k}(t, :) = counts(:, k);
            
        end
    end
    %
  
    %[weights counts] = sample_weights_add(counts, weights, m, alpha, phi, tau);
  
    c_samples{t} = counts;
end


for t=1:T
    [~, indt{t}] = sort(m(:,t), 'descend');
end
thin=1;
Na =size(m,1);


% for t=1:T
%     figure
%     for k=1:min(size(tw(1:end-1, :), 1), 50)
%         plot([k, k],...
%             quantile(weights_st{t}(:,indt{t}(k)),[.025,.975]), 'r', ...
%             'linewidth', 3);
%         hold on
%         plot(k, tw(indt{t}(k), t), 'xg', 'linewidth', 2)
%     end
%     xlim([0.1,min(Na, 50)+.5])
%     legend('95% credible intervals', 'True value')
%     legend boxoff
%     box off
%     xlabel('Index of node (sorted by dec. degree)', 'fontsize', 16)
%     ylabel('Sociability parameter', 'fontsize', 16)
% end


for t=1:T
    figure
    for k=1:min(size(tw(1:end-1, :), 1), 50)
        plot([k, k],...
            quantile(counts_st{t}(:,indt{t}(k)),[.025,.975]), 'r', ...
            'linewidth', 3);
        hold on
        plot(k, tc(indt{t}(k), t), 'xg', 'linewidth', 2)
    end
    xlim([0.1,min(Na, 50)+.5])
    legend('95% credible intervals', 'True value')
    legend boxoff
    box off
    xlabel('Index of node (sorted by dec. degree)', 'fontsize', 16)
    ylabel('counts parameter', 'fontsize', 16)
end



